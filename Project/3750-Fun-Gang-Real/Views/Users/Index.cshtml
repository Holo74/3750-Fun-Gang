@model Assignment_1.Models.ClassUserViewModel
@*@model IEnumerable<Assignment_1.Models.Class>*@
@{
    ViewData["Title"] = "Details";
}
@{
    ViewData["Title"] = "Classes";
}

<script>
    function showNotification() {
        var menu = document.getElementById("notification-menu")
        if (menu.hidden == true) {
            menu.hidden = false;
        }
        else {
            menu.hidden = true;
        }
    }

    document.addEventListener("click", function() {
        console.log(@Html.Raw(Json.Serialize(@ViewData)));
    })
</script>

<h1>
    Welcome
    @Html.DisplayFor(model => model.viewUser.FirstName)
    @Html.DisplayFor(model => model.viewUser.LastName)
</h1>
<style>
    .h1 {
        position: fixed;
        left: 1000px;
    }

    .links {
        position: fixed;
        bottom: 100px;
    }

    .notification{
        width:10px;
        position:fixed;
        right:313px;
        top:65px;
    }

	.notification-menu {
        width: 550px;
		position: fixed;
        right: 77px;
        top: 106px;
        z-index: 4;
        background-color: #f5bb00;
    }

    .vertical-menu {
        width: 200px;
        /* Set a width if you like */
        border: solid;
        border-width: 4px;
        border-radius: 20px;
        border-color: orange;
        display:flex;
        flex-direction:column;
        text-align:center;
    }


    .card {
        /* Add shadows to create the "card" effect */
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        transition: 0.3s;
        width: 20%;
        margin: 50px;
        border-radius: 5px;
        padding: 6px;
        min-width:100px;
    }

        /* On mouse-over, add a deeper shadow */
        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
        }

    /* Add some padding inside the card container */
    .container {
        padding: 2px 16px;
    }
</style>
<div class="d-flex flex-md-row justify-content-between">
    <div class="text-center d-flex justify-content-around">
        @if (ViewData["Student"] != null)
        {
            @if (ViewData["Student"].ToString() == "Student")
            {
                foreach (var item in Model.classes)
                {
                    @*@Html.DisplayNameFor(model => model.Classes.Department)*@
                    <div class="card" id=@item.ClassId>
                        <a href="@Url.Action("Index", "Course", new { classID = item.ClassId })">
                            <div class="container">
                                <h6>
                                    <b>
                                        @Html.DisplayFor(modelItem => item.CourseName) <br /> @Html.DisplayFor(model => item.CourseNumber)
                                    </b>
                                </h6>
                                <p>
                                    @Html.DisplayFor(modelItem => item.DaysOfWeek) <br /> at @Html.DisplayFor(modelItem => item.StartTime)
                                    <br /> to @Html.DisplayFor(modelItem => item.EndTime)
                                </p>
                                <p>@Html.DisplayFor(modelItem => item.Location)</p>
                            </div>
                        </a>
                    </div>
                }
            }
            @if (ViewData["Student"].ToString() != "Student")
            {
                foreach (var item in Model.classes)
                {
                    <div class="card" id=@item.ClassId>
                        <a href="@Url.Action("Index", "Course", new { classID = item.ClassId })">
                            <div class="container">
                                <h6>
                                    <b>
                                        @Html.DisplayFor(modelItem => item.CourseName) <br /> @Html.DisplayFor(model => item.CourseNumber)
                                    </b>
                                </h6>
                                <p>
                                    @Html.DisplayFor(modelItem => item.DaysOfWeek) <br /> at @Html.DisplayFor(modelItem => item.StartTime)
                                    <br /> to @Html.DisplayFor(modelItem => item.EndTime)
                                </p>
                                <p>@Html.DisplayFor(modelItem => item.Location)</p>
                            </div>
                        </a>
                    </div>
                }
            }

            @*@if (ViewData["Student"].ToString() != "Student")
        {
        @foreach (var item in ViewData["UserId"])
        {
        @if (ViewData["UserId"] == model => model.UserId)
        {
        <div class="card">
        <div class="container">
        <h6><b>@Html.DisplayFor(modelItem => item.CourseName)/@Html.DisplayNameFor(model => model.CourseNumber)</b></h6>
        <p>@Html.DisplayFor(modelItem => item.DaysOfWeek) at @Html.DisplayFor(modelItem => item.TimeOfDay)</p>
        <p>@Html.DisplayFor(modelItem => item.Location)</p>
        </div>
        </div>
        }
        }
        }*@
        }
    </div>

    <div class="vertical-menu">
        <div class="active" style="background-color:#66ff99">ToDo's</div>
        @foreach (var item in Model.todoitems)
        {
            <div class="btn-primary">
                <a href="@Url.Action("Assignment", "ClassAssignments", new { ID = item.ID })">@Html.DisplayFor(modelData => item.AssignmentTitle)<br>class: @Html.DisplayFor(modelData => item.CourseNumber)</a>
            </div>
        }
    </div>
</div>
<div class="notification">
    <button onclick="showNotification()">
        n
    </button>
</div>

<div hidden class="notification-menu" id="notification-menu">
    <ul>
        @foreach(var notif in Model.notifications)
        {
            <li>@notif</li>
        }
    </ul>
</div>

<div class="vertical-menu">
    <a href="#" class="active">ToDo's</a>
    @foreach (var item in Model.todoitems )
    {
        <a href="@Url.Action("Assignment", "ClassAssignments", new { ID = item.ID })">@Html.DisplayFor(modelData => item.AssignmentTitle)<br>class: @Html.DisplayFor(modelData => item.CourseNumber)</a>
    }
</div>
</div>
@*@Url.Action("Index", "Assignment", new { assignmentID = item.ID })*@

<div class="links">

    <a asp-action="Details" asp-route-id="model.Id">Account Settings</a>
</div>

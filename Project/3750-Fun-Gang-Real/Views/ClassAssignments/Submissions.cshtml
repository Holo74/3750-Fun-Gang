@model Assignment_1.Models.AssignmentSubmissionViewModel

@{
	ViewData["Title"] = "Course";
}

<head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart','bar'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        // Callback that creates and populates a data table,
        // instantiates the pie chart, passes in the data and
        // draws it.
        function drawChart() {

            // Create the data table.

            // Converts the model list into an array
            var pieInfo = @Html.Raw(Json.Serialize(Model.Submission));
			var assignmentInfo = @Html.Raw(Json.Serialize(Model.Assignment));
			var bins = @Html.Raw(Json.Serialize(Model.GradeBins));
			var s = @Html.Raw(Json.Serialize(Model.Submission.ToArray().Length));

			var info = [["Student", "Grades",{role: 'style'}]]
			let  colors = new Array( 'red', 'red', 'red', 'red', 'red', 'red', 'orange', 'yellow', 'green', 'green', 'cyan');

			// Each object in the list is a class.  Meaning you can access the properties by doing .{name of property}
			for (let i = 0; i <= 10; i++) {
				info.push([(i*10).toString(), bins[i], colors[i]])
			}
			console.log(pieInfo)
			console.log(info)

			var data = new google.visualization.arrayToDataTable(info);

			var view = new google.visualization.DataView(data);

			// Set chart options
			var options = {
				'title': "Grades",
				hAxis: { title: 'Grade Percentage'},
				vAxis: { title: 'Students', minValue: 0, maxValue: s },
				width: 600,
				height: 400,
				legend: { position: "none" },


			};


            // Instantiate and draw our chart, passing in some options.
			var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
			chart.draw(view, options);
        }
    </script>
</head>

<div class="text-center">
	<a class="btn btn-primary" href="/Course?classID=@Model.Assignment.ClassId">Back</a>
	<h1>@Model.Assignment.AssignmentTitle</h1>
</div>
<table class="table">
	<thead>
		<tr>
			<th>
				Student
			</th>
			<th>
				Submitted
			</th>
			<th>
				Grade
			</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model.Submission)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelData => Model.User.Where(u => u.Id == item.UserFK).First().FirstName) @Html.DisplayFor(modelData => Model.User.Where(u => u.Id == item.UserFK).First().LastName)
				</td>
				<td>
					@Html.DisplayFor(modelData => item.SubmitDate)
				</td>
				<td>
					@Html.DisplayFor(modelData => item.Points) / @Html.DisplayFor(modelData => Model.Assignment.MaxPoints)
				</td>
				<td>
					<a class="btn btn-primary" href="/ClassAssignments/Grade/?ID=@item.Id">Grade</a>
				</td>
			</tr>
		}
	</tbody>
</table>

@*if user is teacher*@
<div id="chart_div"></div>